/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sam;

import java.awt.*;
import java.awt.event.*;
import java.util.Locale;
import javax.swing.*;

/**
 *
 * @author Sam As End
 */
public class Keyboard extends JFrame implements KeyListener{
    private boolean OnOffLock;
    private boolean shiftLock;
    
    /**
     *  the append key function
     */
    public void key(char ch) {
        if(shiftLock) {
            ch = Character.toLowerCase(ch);
        }
        keyCh(ch);
    }
    public void keyCh(char ch) {
        text.setText(text.getText()+ch+"");
    }
    /**
     * Creates new form Keyboard
     */
    public Keyboard() {
        initComponents();
        OnOffLock = false;
        shiftLock = false;
        this.addKeyListener(this);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bottom = new javax.swing.JPanel();
        keypad = new javax.swing.JPanel();
        q = new javax.swing.JButton();
        w = new javax.swing.JButton();
        r = new javax.swing.JButton();
        e = new javax.swing.JButton();
        t = new javax.swing.JButton();
        y = new javax.swing.JButton();
        u = new javax.swing.JButton();
        i = new javax.swing.JButton();
        o = new javax.swing.JButton();
        p = new javax.swing.JButton();
        a = new javax.swing.JButton();
        s = new javax.swing.JButton();
        d = new javax.swing.JButton();
        f = new javax.swing.JButton();
        g = new javax.swing.JButton();
        h = new javax.swing.JButton();
        j = new javax.swing.JButton();
        k = new javax.swing.JButton();
        l = new javax.swing.JButton();
        z = new javax.swing.JButton();
        x = new javax.swing.JButton();
        c = new javax.swing.JButton();
        v = new javax.swing.JButton();
        b = new javax.swing.JButton();
        n = new javax.swing.JButton();
        m = new javax.swing.JButton();
        _coma = new javax.swing.JButton();
        _ful = new javax.swing.JButton();
        _semi = new javax.swing.JButton();
        enter = new javax.swing.JButton();
        OnOff = new javax.swing.JButton();
        shift = new javax.swing.JButton();
        _space = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Key Board");
        setAlwaysOnTop(true);
        setResizable(false);

        bottom.setBackground(new java.awt.Color(255, 255, 255));

        q.setBackground(new java.awt.Color(255, 255, 255));
        q.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        q.setText("Q");
        q.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        q.setMargin(new java.awt.Insets(5, 10, 5, 10));
        q.setPreferredSize(new java.awt.Dimension(50, 30));
        q.setVerifyInputWhenFocusTarget(false);
        q.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qActionPerformed(evt);
            }
        });

        w.setBackground(new java.awt.Color(255, 255, 255));
        w.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        w.setText("W");
        w.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        w.setMargin(new java.awt.Insets(5, 10, 5, 10));
        w.setPreferredSize(new java.awt.Dimension(50, 30));
        w.setVerifyInputWhenFocusTarget(false);
        w.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wActionPerformed(evt);
            }
        });

        r.setBackground(new java.awt.Color(255, 255, 255));
        r.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        r.setText("R");
        r.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        r.setMargin(new java.awt.Insets(5, 10, 5, 10));
        r.setPreferredSize(new java.awt.Dimension(50, 30));
        r.setVerifyInputWhenFocusTarget(false);
        r.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rActionPerformed(evt);
            }
        });

        e.setBackground(new java.awt.Color(255, 255, 255));
        e.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        e.setText("E");
        e.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        e.setMargin(new java.awt.Insets(5, 10, 5, 10));
        e.setPreferredSize(new java.awt.Dimension(50, 30));
        e.setVerifyInputWhenFocusTarget(false);
        e.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eActionPerformed(evt);
            }
        });

        t.setBackground(new java.awt.Color(255, 255, 255));
        t.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        t.setText("T");
        t.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        t.setMargin(new java.awt.Insets(5, 10, 5, 10));
        t.setPreferredSize(new java.awt.Dimension(50, 30));
        t.setVerifyInputWhenFocusTarget(false);
        t.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tActionPerformed(evt);
            }
        });

        y.setBackground(new java.awt.Color(255, 255, 255));
        y.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        y.setText("Y");
        y.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        y.setMargin(new java.awt.Insets(5, 10, 5, 10));
        y.setPreferredSize(new java.awt.Dimension(50, 30));
        y.setVerifyInputWhenFocusTarget(false);
        y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yActionPerformed(evt);
            }
        });

        u.setBackground(new java.awt.Color(255, 255, 255));
        u.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        u.setText("U");
        u.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        u.setMargin(new java.awt.Insets(5, 10, 5, 10));
        u.setPreferredSize(new java.awt.Dimension(50, 30));
        u.setVerifyInputWhenFocusTarget(false);
        u.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uActionPerformed(evt);
            }
        });

        i.setBackground(new java.awt.Color(255, 255, 255));
        i.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        i.setText("I");
        i.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        i.setMargin(new java.awt.Insets(5, 10, 5, 10));
        i.setPreferredSize(new java.awt.Dimension(50, 30));
        i.setVerifyInputWhenFocusTarget(false);
        i.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iActionPerformed(evt);
            }
        });

        o.setBackground(new java.awt.Color(255, 255, 255));
        o.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        o.setText("O");
        o.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        o.setMargin(new java.awt.Insets(5, 10, 5, 10));
        o.setPreferredSize(new java.awt.Dimension(50, 30));
        o.setVerifyInputWhenFocusTarget(false);
        o.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oActionPerformed(evt);
            }
        });

        p.setBackground(new java.awt.Color(255, 255, 255));
        p.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        p.setText("P");
        p.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        p.setMargin(new java.awt.Insets(5, 10, 5, 10));
        p.setPreferredSize(new java.awt.Dimension(50, 30));
        p.setVerifyInputWhenFocusTarget(false);
        p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pActionPerformed(evt);
            }
        });

        a.setBackground(new java.awt.Color(255, 255, 255));
        a.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        a.setText("A");
        a.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        a.setMargin(new java.awt.Insets(5, 10, 5, 10));
        a.setPreferredSize(new java.awt.Dimension(50, 30));
        a.setVerifyInputWhenFocusTarget(false);
        a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aActionPerformed(evt);
            }
        });

        s.setBackground(new java.awt.Color(255, 255, 255));
        s.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        s.setText("S");
        s.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        s.setMargin(new java.awt.Insets(5, 10, 5, 10));
        s.setPreferredSize(new java.awt.Dimension(50, 30));
        s.setVerifyInputWhenFocusTarget(false);
        s.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sActionPerformed(evt);
            }
        });

        d.setBackground(new java.awt.Color(255, 255, 255));
        d.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        d.setText("D");
        d.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        d.setMargin(new java.awt.Insets(5, 10, 5, 10));
        d.setPreferredSize(new java.awt.Dimension(50, 30));
        d.setVerifyInputWhenFocusTarget(false);
        d.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dActionPerformed(evt);
            }
        });

        f.setBackground(new java.awt.Color(255, 255, 255));
        f.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        f.setText("F");
        f.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        f.setMargin(new java.awt.Insets(5, 10, 5, 10));
        f.setPreferredSize(new java.awt.Dimension(50, 30));
        f.setVerifyInputWhenFocusTarget(false);
        f.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fActionPerformed(evt);
            }
        });

        g.setBackground(new java.awt.Color(255, 255, 255));
        g.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        g.setText("G");
        g.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        g.setMargin(new java.awt.Insets(5, 10, 5, 10));
        g.setPreferredSize(new java.awt.Dimension(50, 30));
        g.setVerifyInputWhenFocusTarget(false);
        g.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gActionPerformed(evt);
            }
        });

        h.setBackground(new java.awt.Color(255, 255, 255));
        h.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        h.setText("H");
        h.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        h.setMargin(new java.awt.Insets(5, 10, 5, 10));
        h.setPreferredSize(new java.awt.Dimension(50, 30));
        h.setVerifyInputWhenFocusTarget(false);
        h.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hActionPerformed(evt);
            }
        });

        j.setBackground(new java.awt.Color(255, 255, 255));
        j.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        j.setText("J");
        j.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        j.setMargin(new java.awt.Insets(5, 10, 5, 10));
        j.setPreferredSize(new java.awt.Dimension(50, 30));
        j.setVerifyInputWhenFocusTarget(false);
        j.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jActionPerformed(evt);
            }
        });

        k.setBackground(new java.awt.Color(255, 255, 255));
        k.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        k.setText("K");
        k.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        k.setMargin(new java.awt.Insets(5, 10, 5, 10));
        k.setPreferredSize(new java.awt.Dimension(50, 30));
        k.setVerifyInputWhenFocusTarget(false);
        k.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kActionPerformed(evt);
            }
        });

        l.setBackground(new java.awt.Color(255, 255, 255));
        l.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        l.setText("L");
        l.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        l.setMargin(new java.awt.Insets(5, 10, 5, 10));
        l.setPreferredSize(new java.awt.Dimension(50, 30));
        l.setVerifyInputWhenFocusTarget(false);
        l.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lActionPerformed(evt);
            }
        });

        z.setBackground(new java.awt.Color(255, 255, 255));
        z.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        z.setText("Z");
        z.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        z.setMargin(new java.awt.Insets(5, 10, 5, 10));
        z.setPreferredSize(new java.awt.Dimension(50, 30));
        z.setVerifyInputWhenFocusTarget(false);
        z.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zActionPerformed(evt);
            }
        });

        x.setBackground(new java.awt.Color(255, 255, 255));
        x.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        x.setText("X");
        x.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        x.setMargin(new java.awt.Insets(5, 10, 5, 10));
        x.setPreferredSize(new java.awt.Dimension(50, 30));
        x.setVerifyInputWhenFocusTarget(false);
        x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xActionPerformed(evt);
            }
        });

        c.setBackground(new java.awt.Color(255, 255, 255));
        c.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        c.setText("C");
        c.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        c.setMargin(new java.awt.Insets(5, 10, 5, 10));
        c.setPreferredSize(new java.awt.Dimension(50, 30));
        c.setVerifyInputWhenFocusTarget(false);
        c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cActionPerformed(evt);
            }
        });

        v.setBackground(new java.awt.Color(255, 255, 255));
        v.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        v.setText("V");
        v.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        v.setMargin(new java.awt.Insets(5, 10, 5, 10));
        v.setPreferredSize(new java.awt.Dimension(50, 30));
        v.setVerifyInputWhenFocusTarget(false);
        v.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vActionPerformed(evt);
            }
        });

        b.setBackground(new java.awt.Color(255, 255, 255));
        b.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        b.setText("B");
        b.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        b.setMargin(new java.awt.Insets(5, 10, 5, 10));
        b.setPreferredSize(new java.awt.Dimension(50, 30));
        b.setVerifyInputWhenFocusTarget(false);
        b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bActionPerformed(evt);
            }
        });

        n.setBackground(new java.awt.Color(255, 255, 255));
        n.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        n.setText("N");
        n.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        n.setMargin(new java.awt.Insets(5, 10, 5, 10));
        n.setPreferredSize(new java.awt.Dimension(50, 30));
        n.setVerifyInputWhenFocusTarget(false);
        n.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nActionPerformed(evt);
            }
        });

        m.setBackground(new java.awt.Color(255, 255, 255));
        m.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        m.setText("M");
        m.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        m.setMargin(new java.awt.Insets(5, 10, 5, 10));
        m.setPreferredSize(new java.awt.Dimension(50, 30));
        m.setVerifyInputWhenFocusTarget(false);
        m.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mActionPerformed(evt);
            }
        });

        _coma.setBackground(new java.awt.Color(255, 255, 255));
        _coma.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        _coma.setText(",");
        _coma.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        _coma.setMargin(new java.awt.Insets(5, 10, 5, 10));
        _coma.setPreferredSize(new java.awt.Dimension(50, 30));
        _coma.setVerifyInputWhenFocusTarget(false);
        _coma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _comaActionPerformed(evt);
            }
        });

        _ful.setBackground(new java.awt.Color(255, 255, 255));
        _ful.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        _ful.setText(".");
        _ful.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        _ful.setMargin(new java.awt.Insets(5, 10, 5, 10));
        _ful.setPreferredSize(new java.awt.Dimension(50, 30));
        _ful.setVerifyInputWhenFocusTarget(false);
        _ful.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _fulActionPerformed(evt);
            }
        });

        _semi.setBackground(new java.awt.Color(255, 255, 255));
        _semi.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        _semi.setText(";");
        _semi.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        _semi.setMargin(new java.awt.Insets(5, 10, 5, 10));
        _semi.setPreferredSize(new java.awt.Dimension(50, 30));
        _semi.setVerifyInputWhenFocusTarget(false);
        _semi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _semiActionPerformed(evt);
            }
        });

        enter.setBackground(new java.awt.Color(255, 255, 255));
        enter.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        enter.setText("<- Enter");
        enter.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        enter.setMargin(new java.awt.Insets(5, 10, 5, 10));
        enter.setPreferredSize(new java.awt.Dimension(50, 30));
        enter.setVerifyInputWhenFocusTarget(false);
        enter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterActionPerformed(evt);
            }
        });

        OnOff.setBackground(new java.awt.Color(255, 255, 255));
        OnOff.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        OnOff.setText("On");
        OnOff.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        OnOff.setMargin(new java.awt.Insets(5, 10, 5, 10));
        OnOff.setPreferredSize(new java.awt.Dimension(50, 30));
        OnOff.setVerifyInputWhenFocusTarget(false);
        OnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnOffActionPerformed(evt);
            }
        });

        shift.setBackground(new java.awt.Color(255, 255, 255));
        shift.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        shift.setText("Shift");
        shift.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        shift.setMargin(new java.awt.Insets(5, 10, 5, 10));
        shift.setPreferredSize(new java.awt.Dimension(50, 30));
        shift.setVerifyInputWhenFocusTarget(false);
        shift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shiftActionPerformed(evt);
            }
        });

        _space.setBackground(new java.awt.Color(255, 255, 255));
        _space.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        _space.setText("      ");
        _space.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        _space.setMargin(new java.awt.Insets(5, 10, 5, 10));
        _space.setPreferredSize(new java.awt.Dimension(50, 30));
        _space.setVerifyInputWhenFocusTarget(false);
        _space.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _spaceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout keypadLayout = new javax.swing.GroupLayout(keypad);
        keypad.setLayout(keypadLayout);
        keypadLayout.setHorizontalGroup(
            keypadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keypadLayout.createSequentialGroup()
                .addGroup(keypadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(keypadLayout.createSequentialGroup()
                        .addComponent(q, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(w, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(e, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(t, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(u, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(i, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(o, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(p, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(OnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(keypadLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(s, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(d, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(f, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(g, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(h, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(j, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(k, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(_semi, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(keypadLayout.createSequentialGroup()
                        .addGroup(keypadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(keypadLayout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(z, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(v, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(m, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, keypadLayout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(_space, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(_coma, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(_ful, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(shift, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        keypadLayout.setVerticalGroup(
            keypadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keypadLayout.createSequentialGroup()
                .addGroup(keypadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(q, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(e, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(w, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(u, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(i, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(o, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(p, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keypadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(keypadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(a, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(d, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(f, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(s, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(g, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(j, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(k, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(h, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(l, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(_semi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(keypadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(keypadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(z, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(c, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(v, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(b, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(m, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(_coma, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(n, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(_ful, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(shift, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_space, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout bottomLayout = new javax.swing.GroupLayout(bottom);
        bottom.setLayout(bottomLayout);
        bottomLayout.setHorizontalGroup(
            bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(keypad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bottomLayout.setVerticalGroup(
            bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(keypad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        text.setColumns(20);
        text.setRows(5);
        jScrollPane1.setViewportView(text);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xActionPerformed
        key('X');
    }//GEN-LAST:event_xActionPerformed

    private void OnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnOffActionPerformed
        if(OnOffLock) {
            OnOff.setText("Off");
            text.setEnabled(OnOffLock);
            OnOffLock = !OnOffLock;
        }
        else {
            OnOff.setText("On");
            text.setEnabled(OnOffLock);
            OnOffLock = !OnOffLock;
        }
    }//GEN-LAST:event_OnOffActionPerformed

    private void shiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shiftActionPerformed
        Component[] Cs = keypad.getComponents();
        if(shiftLock) {
            for (Component C : Cs) {
                if(C instanceof JButton) {
                    JButton B = (JButton) C;
                    if(B.getText().length() == 1) {
                        B.setText(B.getText().toUpperCase(Locale.ENGLISH));
                        //JOptionPane.showMessageDialog(null, "changed: "+B.getText());
                    }
                    //else JOptionPane.showMessageDialog(null, "length: "+B.getText());
                }
                //else JOptionPane.showMessageDialog(null, "not instanceof: "+C.getName());
            }
        }
        else {
            for (Component C : Cs) {
                if(C instanceof JButton) {
                    JButton B = (JButton) C;
                    if(B.getText().length() <= 1) {
                        B.setText(B.getText().toLowerCase(Locale.ENGLISH));
                        //JOptionPane.showMessageDialog(null, "changed: "+B.getText());
                    }
                    //else JOptionPane.showMessageDialog(null, "length: "+B.getText());
                }
                //else JOptionPane.showMessageDialog(null, "not instanceof: "+C.getName());
            }
        }
        shiftLock = !shiftLock;
    }//GEN-LAST:event_shiftActionPerformed

    private void _spaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__spaceActionPerformed
        keyCh(' ');
    }//GEN-LAST:event__spaceActionPerformed

    private void qActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qActionPerformed
        key('Q');
    }//GEN-LAST:event_qActionPerformed

    private void wActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wActionPerformed
        key('W');
    }//GEN-LAST:event_wActionPerformed

    private void eActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eActionPerformed
        key('E');
    }//GEN-LAST:event_eActionPerformed

    private void rActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rActionPerformed
        key('R');
    }//GEN-LAST:event_rActionPerformed

    private void tActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tActionPerformed
        key('T');
    }//GEN-LAST:event_tActionPerformed

    private void yActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yActionPerformed
        key('Y');
    }//GEN-LAST:event_yActionPerformed

    private void uActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uActionPerformed
        key('U');
    }//GEN-LAST:event_uActionPerformed

    private void iActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iActionPerformed
        key('I');
    }//GEN-LAST:event_iActionPerformed

    private void oActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oActionPerformed
        key('O');
    }//GEN-LAST:event_oActionPerformed

    private void pActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pActionPerformed
        key('P');
    }//GEN-LAST:event_pActionPerformed

    private void aActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aActionPerformed
        key('A');
    }//GEN-LAST:event_aActionPerformed

    private void sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sActionPerformed
        key('S');
    }//GEN-LAST:event_sActionPerformed

    private void dActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dActionPerformed
        key('D');
    }//GEN-LAST:event_dActionPerformed

    private void fActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fActionPerformed
        key('F');
    }//GEN-LAST:event_fActionPerformed

    private void gActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gActionPerformed
        key('G');
    }//GEN-LAST:event_gActionPerformed

    private void hActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hActionPerformed
        key('H');
    }//GEN-LAST:event_hActionPerformed

    private void jActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jActionPerformed
        key('J');
    }//GEN-LAST:event_jActionPerformed

    private void kActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kActionPerformed
        key('K');
    }//GEN-LAST:event_kActionPerformed

    private void lActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lActionPerformed
        key('L');
    }//GEN-LAST:event_lActionPerformed

    private void zActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zActionPerformed
        key('Z');
    }//GEN-LAST:event_zActionPerformed

    private void cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cActionPerformed
        key('C');
    }//GEN-LAST:event_cActionPerformed

    private void vActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vActionPerformed
        key('V');
    }//GEN-LAST:event_vActionPerformed

    private void bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bActionPerformed
        key('B');
    }//GEN-LAST:event_bActionPerformed

    private void nActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nActionPerformed
        key('N');
    }//GEN-LAST:event_nActionPerformed

    private void mActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mActionPerformed
        key('M');
    }//GEN-LAST:event_mActionPerformed

    private void _comaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__comaActionPerformed
        keyCh(',');
    }//GEN-LAST:event__comaActionPerformed

    private void _fulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__fulActionPerformed
        keyCh('.');
    }//GEN-LAST:event__fulActionPerformed

    private void _semiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__semiActionPerformed
        keyCh(';');
    }//GEN-LAST:event__semiActionPerformed

    private void enterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterActionPerformed
        keyCh('\n');
    }//GEN-LAST:event_enterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Keyboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Keyboard().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OnOff;
    private javax.swing.JButton _coma;
    private javax.swing.JButton _ful;
    private javax.swing.JButton _semi;
    private javax.swing.JButton _space;
    private javax.swing.JButton a;
    private javax.swing.JButton b;
    private javax.swing.JPanel bottom;
    private javax.swing.JButton c;
    private javax.swing.JButton d;
    private javax.swing.JButton e;
    private javax.swing.JButton enter;
    private javax.swing.JButton f;
    private javax.swing.JButton g;
    private javax.swing.JButton h;
    private javax.swing.JButton i;
    private javax.swing.JButton j;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton k;
    private javax.swing.JPanel keypad;
    private javax.swing.JButton l;
    private javax.swing.JButton m;
    private javax.swing.JButton n;
    private javax.swing.JButton o;
    private javax.swing.JButton p;
    private javax.swing.JButton q;
    private javax.swing.JButton r;
    private javax.swing.JButton s;
    private javax.swing.JButton shift;
    private javax.swing.JButton t;
    private javax.swing.JTextArea text;
    private javax.swing.JButton u;
    private javax.swing.JButton v;
    private javax.swing.JButton w;
    private javax.swing.JButton x;
    private javax.swing.JButton y;
    private javax.swing.JButton z;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
        key(e.getKeyChar());
    }

    @Override
    public void keyPressed(KeyEvent e) {
        key(e.getKeyChar());
    }

    @Override
    public void keyReleased(KeyEvent e) {    
        key(e.getKeyChar());
    }
}
