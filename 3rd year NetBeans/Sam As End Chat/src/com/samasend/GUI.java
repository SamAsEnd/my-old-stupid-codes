/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.samasend;

import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.rmi.registry.LocateRegistry;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import sun.misc.JavaxSecurityAuthKerberosAccess;

/**
 *
 * @author SamAsEnd
 */
public class GUI extends javax.swing.JFrame {

    HashMap<String, Socket> list;

    public GUI() {
        initComponents();
        setVisible(true);
        net();
        System.out.println("net done");
        scan();
        System.out.println("scan done");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        msg = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        refresh = new javax.swing.JButton();
        ip = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        jList.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "NO CONNECTION" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList);

        msg.setColumns(20);
        msg.setRows(5);
        jScrollPane2.setViewportView(msg);

        jTextPane1.setContentType("text/html"); // NOI18N
        jTextPane1.setText("<html>\r\n  <head>\r\n\r\n  </head>\r\n  <body>\r\n    <h2>Sam As End</h2>");
        jScrollPane3.setViewportView(jTextPane1);

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                            .addComponent(ip))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        try {
            updateList();
        } catch (UnknownHostException ex) {
            return;
        } catch (IOException ex) {
            return;
        }
    }//GEN-LAST:event_refreshActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        String m = msg.getText();
        String add = (String)jList.getSelectedValue();
        if(!"".equals(ip.getText())){
            add = ip.getText();
            try {
                new Thread(new Client(new Socket(add, SamAsEndChat.PORT), jTextPane1, m)).start();
            } catch (UnknownHostException ex) {
                System.err.println(ex);
            } catch (IOException ex) {
                System.err.println(ex);
            }
            return;
        }
        else if(add == null) {
            JOptionPane.showMessageDialog(null, "Select the destination!!");
            return;
        }
        Socket get = list.get(add);
        new Thread(new Client(get, jTextPane1, m)).start();
    }//GEN-LAST:event_sendActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ip;
    private javax.swing.JList jList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextArea msg;
    private javax.swing.JButton refresh;
    private javax.swing.JButton send;
    // End of variables declaration//GEN-END:variables

    private void net() {
        Thread server = null;
        try {
            server = new Thread(new Server(jTextPane1));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error  creating server");
            System.exit(0);
        }
        if (server != null) {
            server.start();
        } else {
            JOptionPane.showMessageDialog(null, "Error  creating server");
            System.exit(0);
        }
        System.out.println("server created");
    }

    private void scan() {
        list = new HashMap<>();
        try {
            updateList();
        } catch (UnknownHostException ex) {
        } catch (IOException ex) {
        }
    }

    private void updateList() throws UnknownHostException, IOException {
        String subnet = InetAddress.getLocalHost().getHostAddress();
        int lastIndexOf = subnet.lastIndexOf(".");
        subnet = subnet.substring(0, lastIndexOf);
        System.out.println(subnet);
        int timeout = 100;
        list.clear();
        for (int i = 1; i < 254; i++) {
            String host = subnet + "." + i;
            if (InetAddress.getByName(host).isReachable(timeout)) {
                System.out.println(host + " is reachable");
                //if(!list.containsKey(host)) {
                list.put(host, new Socket(host, SamAsEndChat.PORT));
                //}
            }
            System.out.println("checked " + host);
        }
        System.out.println("net search done");
        jList.setModel(new AbstractListModel() {
            String[] l = list.keySet().toArray(new String[0]);
            @Override
            public int getSize() {
                return l.length;
            }
            @Override
            public Object getElementAt(int index) {
                return l[index];
            }
        });
    }
}
