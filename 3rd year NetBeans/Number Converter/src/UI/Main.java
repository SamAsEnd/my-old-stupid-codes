/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import com.sam.Converter.*;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;
import sun.misc.Regexp;

/**
 *
 * @author Sam As End
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    com.sam.Converter.Number num;

    public Main() {
        initComponents();
        num = new com.sam.Converter.Number();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Dialog = new javax.swing.JDialog();
        Dtop = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        text = new javax.swing.JLabel();
        top = new javax.swing.JPanel();
        img = new javax.swing.JLabel();
        bottom = new javax.swing.JPanel();
        from = new javax.swing.JComboBox();
        to = new javax.swing.JComboBox();
        in = new javax.swing.JTextField();
        toLabel = new javax.swing.JLabel();
        out = new javax.swing.JTextField();
        infoLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        exit = new javax.swing.JMenuItem();
        choose = new javax.swing.JMenu();
        btd = new javax.swing.JMenuItem();
        bth = new javax.swing.JMenuItem();
        dtb = new javax.swing.JMenuItem();
        dth = new javax.swing.JMenuItem();
        htb = new javax.swing.JMenuItem();
        htd = new javax.swing.JMenuItem();
        helpp = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        about = new javax.swing.JMenuItem();
        help = new javax.swing.JMenuItem();

        Dialog.setTitle("About");
        Dialog.setAlwaysOnTop(true);
        Dialog.setMinimumSize(new java.awt.Dimension(331, 303));
        Dialog.setResizable(false);

        Dtop.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/SamAsEnd - Copy.png"))); // NOI18N

        javax.swing.GroupLayout DtopLayout = new javax.swing.GroupLayout(Dtop);
        Dtop.setLayout(DtopLayout);
        DtopLayout.setHorizontalGroup(
            DtopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DtopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DtopLayout.setVerticalGroup(
            DtopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DtopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        text.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        text.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout DialogLayout = new javax.swing.GroupLayout(Dialog.getContentPane());
        Dialog.getContentPane().setLayout(DialogLayout);
        DialogLayout.setHorizontalGroup(
            DialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Dtop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DialogLayout.setVerticalGroup(
            DialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Dtop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sam As End Number Converter");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(213, 213, 213));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        setForeground(java.awt.Color.white);
        setResizable(false);

        top.setBackground(new java.awt.Color(255, 255, 255));

        img.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/SamAsEnd - Copy.png"))); // NOI18N

        javax.swing.GroupLayout topLayout = new javax.swing.GroupLayout(top);
        top.setLayout(topLayout);
        topLayout.setHorizontalGroup(
            topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        topLayout.setVerticalGroup(
            topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(img, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
        );

        bottom.setBackground(new java.awt.Color(255, 255, 255));

        from.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Binary", "Decimal", "Hexa Decimal" }));
        from.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromActionPerformed(evt);
            }
        });

        to.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Binary", "Decimal", "Hexa Decimal" }));
        to.setToolTipText("");
        to.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toActionPerformed(evt);
            }
        });

        in.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inKeyReleased(evt);
            }
        });

        toLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        toLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        toLabel.setText("To");

        out.setEditable(false);

        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText("Welcome");

        javax.swing.GroupLayout bottomLayout = new javax.swing.GroupLayout(bottom);
        bottom.setLayout(bottomLayout);
        bottomLayout.setHorizontalGroup(
            bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(bottomLayout.createSequentialGroup()
                        .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(toLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(bottomLayout.createSequentialGroup()
                        .addComponent(in, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        bottomLayout.setVerticalGroup(
            bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(from, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(to, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(toLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(in, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(out, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        file.setText("File");

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        file.add(exit);

        jMenuBar1.add(file);

        choose.setText("Choose");

        btd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK));
        btd.setText("Bin to Dec");
        btd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btdActionPerformed(evt);
            }
        });
        choose.add(btd);

        bth.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK));
        bth.setText("Bin to Hex");
        bth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bthActionPerformed(evt);
            }
        });
        choose.add(bth);

        dtb.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK));
        dtb.setText("Dec to Bin");
        dtb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtbActionPerformed(evt);
            }
        });
        choose.add(dtb);

        dth.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.ALT_MASK));
        dth.setText("Dec to Hex");
        dth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dthActionPerformed(evt);
            }
        });
        choose.add(dth);

        htb.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.ALT_MASK));
        htb.setText("Hex to Bin");
        htb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htbActionPerformed(evt);
            }
        });
        choose.add(htb);

        htd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.ALT_MASK));
        htd.setText("Hex to Dec");
        htd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                htdActionPerformed(evt);
            }
        });
        choose.add(htd);

        jMenuBar1.add(choose);

        helpp.setText("Help");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Visit site");
        jMenuItem1.setToolTipText("[www.samasend.com]");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        helpp.add(jMenuItem1);

        about.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        helpp.add(about);

        help.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        help.setText("Help");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });
        helpp.add(help);

        jMenuBar1.add(helpp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(top, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromActionPerformed
        // from change
        play(1);
        update();
    }//GEN-LAST:event_fromActionPerformed

    private void toActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toActionPerformed
        // to change
        play(1);
        update();
    }//GEN-LAST:event_toActionPerformed

    private void inKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inKeyReleased
        // new value
        update();
    }//GEN-LAST:event_inKeyReleased

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        play(-1);
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void btdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btdActionPerformed
        from.setSelectedIndex(0);
        to.setSelectedIndex(1);
    }//GEN-LAST:event_btdActionPerformed

    private void dtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dtbActionPerformed
        from.setSelectedIndex(1);
        to.setSelectedIndex(0);
    }//GEN-LAST:event_dtbActionPerformed

    private void dthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dthActionPerformed
        from.setSelectedIndex(1);
        to.setSelectedIndex(2);
    }//GEN-LAST:event_dthActionPerformed

    private void htbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htbActionPerformed
        from.setSelectedIndex(2);
        to.setSelectedIndex(0);
    }//GEN-LAST:event_htbActionPerformed

    private void bthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bthActionPerformed
        from.setSelectedIndex(0);
        to.setSelectedIndex(2);
    }//GEN-LAST:event_bthActionPerformed

    private void htdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_htdActionPerformed
        from.setSelectedIndex(2);
        to.setSelectedIndex(1);
    }//GEN-LAST:event_htdActionPerformed

    private void inKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inKeyPressed
        int code = evt.getKeyChar();
        if (code == KeyEvent.VK_0) {
            play(10);
        } else if (code == KeyEvent.VK_1) {
            play(11);
        } else if (code == KeyEvent.VK_2) {
            play(12);
        } else if (code == KeyEvent.VK_3) {
            play(13);
        } else if (code == KeyEvent.VK_4) {
            play(14);
        } else if (code == KeyEvent.VK_5) {
            play(15);
        } else if (code == KeyEvent.VK_6) {
            play(16);
        } else if (code == KeyEvent.VK_7) {
            play(17);
        } else if (code == KeyEvent.VK_8) {
            play(18);
        } else if (code == KeyEvent.VK_9) {
            play(19);
        } else {
        }
    }//GEN-LAST:event_inKeyPressed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
        Dialog.setLocationRelativeTo(null);
        text.setText("<html><center> <b>Version: </b>1.1<br>+audio<br> <b>GNU GENERAL PUBLIC LICENSE</b><br> Version 2, June 1991<br> <br> Copyright (C) 1989, 1991 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. <br> Preamble </center>");
        Dialog.setTitle("About");
        Dialog.setVisible(true);
        play(2);
    }//GEN-LAST:event_aboutActionPerformed

    @SuppressWarnings("empty-statement")
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler http://www.samasend.com");
        } catch (IOException ignored) {
            ;
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        Dialog.setLocationRelativeTo(null);
        Dialog.setTitle("Help");
        text.setText("<html><center><b>sorry</b> i don't have a help doc for now!!</center>");
        Dialog.setVisible(true);
        play(2);
    }//GEN-LAST:event_helpActionPerformed

    void update() {

        long src;
        src = 0;
        int i = from.getSelectedIndex();

        if (in.getText().trim().length() == 0) {
            out.setText(" ");
            play(0);
            infoLabel.setForeground(Color.red);
            infoLabel.setText("Empty");
            return;
        }
        if (i == 0) {
            //<editor-fold defaultstate="collapsed" desc="Bin to Long">
            if (!in.getText().matches("\\d*")) {
                error("Only can contain 1 & 0 remove any char");
                return;
            } else {
                char[] ch = in.getText().toCharArray();
                Stack<Integer> s = new Stack<>();
                s.clear();
                try {
                    for (int idx = 0; idx < ch.length; idx++) {
                        if (idx > 32) {
                            throw new Exception("More than 32 bit");
                        }
                        int ii = Integer.parseInt("" + ch[idx]);
                        if (ii != 0 && ii != 1) {
                            throw new Exception("Only can contain 1 & 0 remove " + ii);
                        } else {
                            s.add(new Integer(ii));
                        }
                    }
                    long outL = 0L;
                    int iii = 0;
                    while (!s.empty()) {
                        outL = (long) (outL + Math.pow(2.0, (double) iii++) * s.pop());
                    }
                    num.setValue(outL);
                } catch (Exception e) {
                    error(e.getMessage());
                    return;
                }

            }
            //</editor-fold>
        } else if (i == 2) {
            //<editor-fold defaultstate="collapsed" desc="Dex to Long">
            char[] ch = in.getText().toUpperCase().toCharArray();
            Stack<Integer> s = new Stack<>();
            s.clear();
            try {
                for (int idx = 0; idx < ch.length; idx++) {
                    if (idx > 32) {
                        throw new Exception("More than 32 bit");
                    }
                    if(('A' <= ch[idx] && ch[idx] <= 'F') || (Math.abs(Integer.parseInt(""+ch[idx])) < 10 )) {
                        int ii;
                        if('A' <= ch[idx] && 'F' <= 70) {
                            ii = Character.getNumericValue(ch[idx]);
                        }
                        else {
                            ii = Integer.parseInt(""+ch[idx]);
                        }
                        if(0<=ii && ii<=15) {
                            s.add(new Integer(ii));
                        }
                        else {
                            error("Remove "+ii);
                            return;
                        }
                    }
                    else {
                        throw new Exception("Contain 0-9 & A-F");
                    }
                }
                long outL = 0L;
                int iii = 0;
                while (!s.empty()) {
                    int t = s.pop();
                    /*
                     * Uncomment for debuging
                     * JOptionPane.showMessageDialog(null, t, "num", JOptionPane.INFORMATION_MESSAGE);
                     */
                    outL = (long) (outL + Math.pow(16.0, (double) iii++) * t);
                }
                num.setValue(outL);
            } catch (Exception e) {
                error(e.getMessage());
                return;
            }
        } //</editor-fold>
        else {
            //<editor-fold defaultstate="collapsed" desc="Long Str to Long">
            try {
                if (!in.getText().matches("\\d*")) {
                    error("Can contain a char");
                    return;
                }
                num.setValue(Long.parseLong(in.getText()));
            } catch (Exception e) {
                error(e.getMessage());
            }
            //</editor-fold>
        }
        int o = to.getSelectedIndex();
        String str;
        if (o
                == 0) {
            str = " " + num.toBinary();
        } else if (o
                == 1) {
            str = " " + num.toDecimal();
        } else {
            str = " " + num.toHexaDecimal();
        }

        out.setText(str);

        infoLabel.setText(
                "Developed By Sam As End");
        infoLabel.setForeground(Color.GREEN);
    }

    void play(int index) {
        InputStream sound = null;
        AudioStream audio;
        File f;


        try {
            if (index == 0) {
                sound = Main.class
                        .getResourceAsStream("error.wav");
                //sound = new FileInputStream(new File("C:\\Users\\Sam As End\\Documents\\NetBeansProjects\\Tempreture Converter\\src\\audio\\error.wav"));
            } else if (index == 1) {
                sound = Main.class
                        .getResourceAsStream("drip.au");
            } else if (index == 2) {
                sound = Main.class
                        .getResourceAsStream("computer.au");
            } else if (index == 10) {
                sound = Main.class
                        .getResourceAsStream("0.au");
            } else if (index == 11) {
                sound = Main.class
                        .getResourceAsStream("1.au");
            } else if (index == 12) {
                sound = Main.class
                        .getResourceAsStream("2.au");
            } else if (index == 13) {
                sound = Main.class
                        .getResourceAsStream("3.au");
            } else if (index == 14) {
                sound = Main.class
                        .getResourceAsStream("4.au");
            } else if (index == 15) {
                sound = Main.class
                        .getResourceAsStream("5.au");
            } else if (index == 16) {
                sound = Main.class
                        .getResourceAsStream("6.au");
            } else if (index == 17) {
                sound = Main.class
                        .getResourceAsStream("7.au");
            } else if (index == 18) {
                sound = Main.class
                        .getResourceAsStream("8.au");
            } else if (index == 19) {
                sound = Main.class
                        .getResourceAsStream("9.au");
            } else if (index == -1) {
                sound = Main.class
                        .getResourceAsStream("exit.wav");
            } else {
                return;
            }
            audio = new AudioStream(sound);
            AudioPlayer.player.start(audio);


        } catch (FileNotFoundException ex) {
            Logger.getLogger(Main.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Main.class
                    .getName()).log(Level.SEVERE, null, ex);
        }


    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main m = new Main();
                m.setVisible(true);
                m.setLocationRelativeTo(null);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog Dialog;
    private javax.swing.JPanel Dtop;
    private javax.swing.JMenuItem about;
    private javax.swing.JPanel bottom;
    private javax.swing.JMenuItem btd;
    private javax.swing.JMenuItem bth;
    private javax.swing.JMenu choose;
    private javax.swing.JMenuItem dtb;
    private javax.swing.JMenuItem dth;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu file;
    private javax.swing.JComboBox from;
    private javax.swing.JMenuItem help;
    private javax.swing.JMenu helpp;
    private javax.swing.JMenuItem htb;
    private javax.swing.JMenuItem htd;
    private javax.swing.JLabel img;
    private javax.swing.JTextField in;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField out;
    private javax.swing.JLabel text;
    private javax.swing.JComboBox to;
    private javax.swing.JLabel toLabel;
    private javax.swing.JPanel top;
    // End of variables declaration//GEN-END:variables

    private void error(String str) {
        out.setText(" ");
        play(0);
        infoLabel.setForeground(Color.red);
        infoLabel.setText(str);
    }
}
