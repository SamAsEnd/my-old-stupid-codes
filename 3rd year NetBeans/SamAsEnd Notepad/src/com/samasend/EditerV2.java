/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.samasend;

import java.awt.Component;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author Sam As End
 */
public class EditerV2 extends javax.swing.JFrame {

    private static BufferedImage getShot(Component me) {
        BufferedImage bi = new BufferedImage(me.getWidth(), me.getHeight(), BufferedImage.TYPE_INT_RGB);
        me.paint(bi.getGraphics());
        return bi;
    }
    private File file;
    StringBuilder textBackup;
    StringBuilder clipBoard;

    /**
     * Creates new form Editer
     */
    public EditerV2() {
        initComponents();
        initIcons();
        ImageIcon imageIcon = new ImageIcon(EditerV2.class.getResource("s21.png"));
        this.setIconImage(imageIcon.getImage());

        String userHome = System.getProperty("user.home");
        File fontFile;
        fontFile = new File(userHome, "___.txt");
        BufferedReader br = null;
        int t = 0, s = 0;
        String f = null;
        if (fontFile.exists()) {
            try {
                br = new BufferedReader(new FileReader(fontFile));
            } catch (FileNotFoundException ex) {
            }
            try {
                f = br.readLine();
                t = Integer.parseInt(br.readLine());
                s = Integer.parseInt(br.readLine());
                if (t == 1) {
                    t = Font.ITALIC;
                } else if (t == 2) {
                    t = Font.BOLD;
                } else {
                    t = Font.PLAIN;
                }
            } catch (IOException ex) {
            }
            catch(Exception ex) {
                text.setFont(new Font("Tahoma", Font.PLAIN, 14));
            }
            try {
                String[] fontsStrings = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
                ArrayList<String> list;
                list = new ArrayList<>();
                for (String fontString : fontsStrings) {
                    list.add(fontString);
                }
                if (list.contains(f)) {
                    text.setFont(new Font(f, t, s));
                } else {
                    text.setFont(new Font("Tahoma", t, s));
                }

            } catch (Exception e) {
            }
        } else {
            text.setFont(new Font("Tahoma", Font.PLAIN, 14));
        }


        file = null;
        textBackup = new StringBuilder();
        clipBoard = new StringBuilder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        bar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        openMenu = new javax.swing.JMenuItem();
        saveMenu = new javax.swing.JMenuItem();
        saveAsMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        undoMenu = new javax.swing.JMenuItem();
        cutMenu = new javax.swing.JMenuItem();
        copyMenu = new javax.swing.JMenuItem();
        pasteMenu = new javax.swing.JMenuItem();
        deleteMenu = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        warp = new javax.swing.JCheckBoxMenuItem();
        fontMenu = new javax.swing.JMenuItem();
        shot = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        viewHelpMenu = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SamAsEnd Notepad");
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setForeground(new java.awt.Color(51, 51, 51));
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(480, 360));
        setName("frame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 600));

        text.setColumns(20);
        text.setRows(5);
        text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(text);

        bar.setBackground(new java.awt.Color(255, 255, 255));

        fileMenu.setBackground(new java.awt.Color(255, 255, 255));
        fileMenu.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenu.setBackground(new java.awt.Color(255, 255, 255));
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        fileMenu.add(newMenu);

        openMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenu.setBackground(new java.awt.Color(255, 255, 255));
        openMenu.setText("Open ...");
        openMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openMenu);

        saveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenu.setBackground(new java.awt.Color(255, 255, 255));
        saveMenu.setText("Save");
        saveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenu);

        saveAsMenu.setBackground(new java.awt.Color(255, 255, 255));
        saveAsMenu.setText("Save As ...");
        saveAsMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenu);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenu.setBackground(new java.awt.Color(255, 255, 255));
        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        bar.add(fileMenu);

        editMenu.setText("Edit");

        undoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenu.setText("Undo");
        undoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuActionPerformed(evt);
            }
        });
        editMenu.add(undoMenu);

        cutMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenu.setText("Cut");
        cutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuActionPerformed(evt);
            }
        });
        editMenu.add(cutMenu);

        copyMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenu.setText("Copy");
        copyMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuActionPerformed(evt);
            }
        });
        editMenu.add(copyMenu);

        pasteMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenu.setText("Paste");
        pasteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenu);

        deleteMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        deleteMenu.setText("Delete");
        deleteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuActionPerformed(evt);
            }
        });
        editMenu.add(deleteMenu);

        bar.add(editMenu);

        jMenu1.setText("Format");

        warp.setText("Word Warp");
        warp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warpActionPerformed(evt);
            }
        });
        jMenu1.add(warp);

        fontMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        fontMenu.setText("Font . . .");
        fontMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontMenuActionPerformed(evt);
            }
        });
        jMenu1.add(fontMenu);

        shot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        shot.setText("Screen Shot");
        shot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shotActionPerformed(evt);
            }
        });
        jMenu1.add(shot);

        bar.add(jMenu1);

        helpMenu.setText("Help");

        viewHelpMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        viewHelpMenu.setText("View Help");
        helpMenu.add(viewHelpMenu);

        aboutMenu.setText("About SamAsEnd Notepad");
        helpMenu.add(aboutMenu);

        bar.add(helpMenu);

        setJMenuBar(bar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuActionPerformed
        int choose = 1;
        if (file != null || text.getText().length() > 0) {
            play(0);
            String[] strings = {"Save", "Don't Save", "Cancle"};
            FileDialog fileDialog = null;
            choose = JOptionPane.showOptionDialog(this, "Do you want to save?", "SamAsEnd Notepad", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, strings, null);

        } else if (choose == 0) {
            save();
        } else if (choose == 1) {
        } else {
            //System.out.println("Cancled");
            return;
        }
        open();
    }//GEN-LAST:event_openMenuActionPerformed

    private void saveAsMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuActionPerformed
        file = null;
        save();
    }//GEN-LAST:event_saveAsMenuActionPerformed

    private void deleteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuActionPerformed
        text.replaceSelection(null);
    }//GEN-LAST:event_deleteMenuActionPerformed

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        dispose();
    }//GEN-LAST:event_exitMenuActionPerformed

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        int choose = 1;
        if (file != null || text.getText().length() > 0) {
            play(0);
            String[] strings = {"Save", "Don't Save", "Cancle"};
            FileDialog fileDialog = null;
            choose = JOptionPane.showOptionDialog(this, "Do you want to save?", "SamAsEnd Notepad", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE, null, strings, null);

        }
        if (choose == 0) {
            save();
        } else if (choose == 1) {
        } else {
            //System.out.println("Cancled");
            return;
        }
        file = null;
        text.setText("");
    }//GEN-LAST:event_newMenuActionPerformed

    private void fontMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontMenuActionPerformed
        FontChooser.getChoose(text);
    }//GEN-LAST:event_fontMenuActionPerformed

    private void saveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuActionPerformed
        save();
    }//GEN-LAST:event_saveMenuActionPerformed

    private void undoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuActionPerformed
        //System.out.println(text.getSelectedText());
        text.setText(textBackup.toString());
    }//GEN-LAST:event_undoMenuActionPerformed

    private void textKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textKeyTyped
        textBackup.replace(0, textBackup.length(), text.getText());
    }//GEN-LAST:event_textKeyTyped

    private void cutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuActionPerformed
        String selectedText = text.getSelectedText();
        if (selectedText == null) {
            return;
        }
        clipBoard.replace(0, clipBoard.length(), selectedText);
        text.replaceSelection(null);
    }//GEN-LAST:event_cutMenuActionPerformed

    private void copyMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuActionPerformed
        String selectedText = text.getSelectedText();
        if (selectedText == null) {
            return;
        }
        clipBoard.replace(0, clipBoard.length(), selectedText);
    }//GEN-LAST:event_copyMenuActionPerformed

    private void pasteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuActionPerformed
        text.insert(clipBoard.toString(), text.getCaretPosition());
    }//GEN-LAST:event_pasteMenuActionPerformed

    private void shotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shotActionPerformed
        BufferedImage bufferedImage = EditerV2.getShot(text);
        FileDialog fileDialog;
        fileDialog = new FileDialog(this, "Where to save", FileDialog.SAVE);
        fileDialog.setMultipleMode(false);
        //final FileNameExtensionFilter f = new FileNameExtensionFilter("Image formats", "jpg", "png", "jepg", "bmp");
        //fileDialog.
        fileDialog.setVisible(true);
        String file1 = fileDialog.getFile();
        String directory = fileDialog.getDirectory();
        try {
            ImageIO.write(bufferedImage, "jpg", new File(directory + file1 + ".jpg"));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "@ " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_shotActionPerformed

    private void warpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warpActionPerformed
        text.setLineWrap(warp.isSelected());
    }//GEN-LAST:event_warpActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JMenuBar bar;
    private javax.swing.JMenuItem copyMenu;
    private javax.swing.JMenuItem cutMenu;
    private javax.swing.JMenuItem deleteMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fontMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenuItem openMenu;
    private javax.swing.JMenuItem pasteMenu;
    private javax.swing.JMenuItem saveAsMenu;
    private javax.swing.JMenuItem saveMenu;
    private javax.swing.JMenuItem shot;
    private javax.swing.JTextArea text;
    private javax.swing.JMenuItem undoMenu;
    private javax.swing.JMenuItem viewHelpMenu;
    private javax.swing.JCheckBoxMenuItem warp;
    // End of variables declaration//GEN-END:variables

    private void open() {
        FileDialog fileDialog;
        fileDialog = new FileDialog(this, "Open a file", FileDialog.LOAD);
        fileDialog.setMultipleMode(false);
        fileDialog.setVisible(true);
        String file1 = fileDialog.getFile();
        String directory = fileDialog.getDirectory();
        //System.out.println(directory + file1);
        try {
            try (BufferedReader bufferedReader = new BufferedReader(new FileReader(directory + file1))) {
                file = new File(directory + file1);
                char[] ch = new char[1024];
                StringBuilder str = new StringBuilder();
                while ((bufferedReader.read(ch)) != -1) {
                    str.append(ch);
                }
                text.setText(str.toString());
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, null, ex.toString(), JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, null, ex.toString(), JOptionPane.ERROR_MESSAGE);
        }
    }

    private void save() {
        if (file == null) {
            FileDialog fileDialog;
            play(0);
            fileDialog = new FileDialog(this, "Save the file", FileDialog.SAVE);
            fileDialog.setVisible(true);
            //fileDialog.setFile("untitled.txt");
            String file1 = fileDialog.getFile();
            String directory = fileDialog.getDirectory();
            //System.out.println(directory+file1);
            file = new File(directory + file1);
        } else {
            System.out.println("i know where 2 save");
        }
        try {
            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file))) {
                bufferedWriter.write(text.getText());
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, null, ex.toString(), JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, null, ex.toString(), JOptionPane.ERROR_MESSAGE);
        }
    }

    void play(int index) {
        InputStream sound = null;
        AudioStream audio;
        File f;


        try {
            if (index == 0) {
                sound = EditerV2.class
                        .getResourceAsStream("error.wav");
                //sound = new FileInputStream(new File("C:\\Users\\Sam As End\\Documents\\NetBeansProjects\\Tempreture Converter\\src\\audio\\error.wav"));
            } else if (index == 1) {
                sound = EditerV2.class
                        .getResourceAsStream("drip.au");
            } else if (index == 2) {
                sound = EditerV2.class
                        .getResourceAsStream("computer.au");
            } else if (index == 10) {
                sound = EditerV2.class
                        .getResourceAsStream("0.au");
            } else if (index == 11) {
                sound = EditerV2.class
                        .getResourceAsStream("1.au");
            } else if (index == 12) {
                sound = EditerV2.class
                        .getResourceAsStream("2.au");
            } else if (index == 13) {
                sound = EditerV2.class
                        .getResourceAsStream("3.au");
            } else if (index == 14) {
                sound = EditerV2.class
                        .getResourceAsStream("4.au");
            } else if (index == 15) {
                sound = EditerV2.class
                        .getResourceAsStream("5.au");
            } else if (index == 16) {
                sound = EditerV2.class
                        .getResourceAsStream("6.au");
            } else if (index == 17) {
                sound = EditerV2.class
                        .getResourceAsStream("7.au");
            } else if (index == 18) {
                sound = EditerV2.class
                        .getResourceAsStream("8.au");
            } else if (index == 19) {
                sound = EditerV2.class
                        .getResourceAsStream("9.au");
            } else if (index == -1) {
                sound = EditerV2.class
                        .getResourceAsStream("exit.wav");
            } else {
                return;
            }
            audio = new AudioStream(sound);
            AudioPlayer.player.start(audio);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, null, ex.toString(), JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, null, ex.toString(), JOptionPane.ERROR_MESSAGE);
        }
    }

    private void initIcons() {
        HashMap<JMenuItem, String> map = new HashMap<>();
        map.put(newMenu, "new.png");
        map.put(openMenu, "open.png");
        map.put(saveMenu, "save.png");
        map.put(saveAsMenu, "saveAs.png");
        map.put(exitMenu, "exit.png");

        map.put(undoMenu, null);
        map.put(cutMenu, null);
        map.put(copyMenu, null);
        map.put(pasteMenu, null);
        map.put(deleteMenu, null);

        map.put(viewHelpMenu, "help.png");
        map.put(aboutMenu, null);
        map.put(shot, null);
        //map.put(warp, null);
        //map.put(fontMenu, null);
        //map.put(JMenuItem, String);
        Set<JMenuItem> keySet = map.keySet();
        for (Iterator<JMenuItem> it = keySet.iterator(); it.hasNext();) {
            JMenuItem jMenuItem = it.next();
            String get = map.get(jMenuItem);
            ImageIcon n;
            if (get != null) {
                try {
                    n = new ImageIcon(getClass().getResource("../../image/" + get));
                } catch (Exception e) {
                    n = new ImageIcon(getClass().getResource("/image/" + get));
                }
            } else {
                n = new ImageIcon(createImage(30, 30));
            }
            jMenuItem.setIcon(n);
        }
    }
}